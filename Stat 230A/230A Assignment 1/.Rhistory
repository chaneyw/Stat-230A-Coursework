load("C:/Users/Wes/Downloads/mixtureMean.RData")
head(IDsA)
head(muA)
max(IDsA)
sapply(IDsA,max)
max(sapply(IDsA,max))
wgtsA[1]
?mapply
?inner
wgtsA[1]%*%muA[1]
a = c(1,2,3,4)
b = c(2,3,4,5)
a%*%b
sum(mapply(a*b))
sum(mapply(*,a,b))
multiply(a,b)
?*
?`*`
times(a,b)
multiply <- function(a,b){
return a*b
}
multiply <- function(a,b){
return(a*b)
}
mapply(multiply,a,b)
sum(mapply,multiply,a,b)
sum(mapply(multiply,a,b))
sapply(IDsA[1:10],function(x){sum(mapply(multiply,wgtsA[x],muA[x]))})
wgtsA[1]
wgtsA[1][1]
mapply(multiply,wgtsA[1],muA[1])
sum(mapply(multiply,wgtsA[1],muA[1]))
IDsA[1]
sapply(IDsA[1:10],function(x){sapply(x,function(y){sum(mapply(multiply,wgtsA[y],muA[y]))}))}
sapply(IDsA[1:10],function(x){sapply(x,function(y){sum(mapply(multiply,wgtsA[y],muA[y]))})})
IDsA[1]
sapply(c(1,2,3),function(y){sum(mapply(multiply,wgtsA[y],muA[y]))}
)
wgtsA[1]
muA[1]
IDsA[1]
sum(mapply(multiply,wgtsA[1],muA[IDsA[1]])
)
muA[1]
sapply(IDsA[1],function(x){muA[x]})
mapply(multiply,wgtsA[1],sapply(IDsA[1],function(x){muA[x]}))
wgtsA[1]
sapply(IDsA[1],function(x){muA[x]}) * c(1,2,3,4,5,6,7)
a <- c(1,2,3)
b <- c(2,3,4)
mapply(multiply,a,b)
sapply(IDsA[1],function(x){muA[x]})
sapply(IDsA[1],function(x){muA[x]}) * a
wgtsA[1]
sapply(IDsA[1],function(x){muA[x]})
a <- sapply(IDsA[1],function(x){muA[x]})
wgtsA[1]*a
wgtsA[1][1] * a[1]
wgtsA[1]
b<- wgtsA[1]
mapply(multiply,a,b)
?mapply
lapply(IDsA[1],function(x){muA[x]})
mapply(multiply,wgtsA[1],lapply(IDsA[1],function(x){muA[x]}))
sum(mapply(multiply,wgtsA[1],lapply(IDsA[1],function(x){muA[x]})))
calcs <- sapply(1:100000,function(y){sum(mapply(multiply,wgtsA[y],lapply(IDsA[y],function(x){muA[x]})))})
head(calcs)
a <- c(1,2,3)
b <- c(1,2,3)
mapply(`*`,a,b)
IDsA[1]
a <- matrix(zeros(100000000),nrows=100000)
a <- matrix(zeros(100000000),nrow=100000)
zeros(5)
zero(5)
a <- matrix(rep(0,100000000),nrow=100000)
sapply(IDsA[1],function(x){a[1][x]<-muA[x]})
IDsA[1]
sapply(IDsA[1],function(x){x*2})
sapply(IDsA[1],function(x){a[1,x]<-muA[x]})
head(a,1)
max(a[1])
apply(IDsA[1],function(x){a[1,x]<-muA[x]})
b <- as.vector(IDsA[1])
b
b <- as.numeric(IDsA[1])
IDsA[[1]]
muA[IDsA[[1]]]
muA[IDsA[[1]]]%*%wgtsA[[1]]
calcs[1]
calcs_2 <- sapply(1:100000,function(x){muA[IDsA[[x]]]%*%wgtsA[[x]]})
calcs == calcs_2
a[wgtsA[[1]],1]
a[IDsA[[1]],1]
a[IDsA[[1]],1]<-wgtsA[[1]]
a[1,]
wgtsA[[1]]
a[IDsA[[1]],1]<-wgtsA[[1]]
a[1,]
a[1.1]<-2
a[1,1]
a{1,}
a[1,]
a[1,1]<-0
a[c(1,2),1]<-1
a[1,]
a[2.]
a[2,]
a[IDsA[[1]],1]<-wgtsA[[1]]
a[,1]
a <- matrix(rep(0,100000000),nrow=100000)
a[1,IDsA[[1]]]<-wgtsA[[1]]
a[1,]
sapply(1:100000, function(x){a[1,IDsA[[x]]]<-wgtsA[[x]]
)
sapply(1:100000, function(x){a[1,IDsA[[x]]]<-wgtsA[[x]]})
head(a)
class(a)
class(a)[1]
class(a)[5]
class(a[1])
class(a[5])
class(a[100])
a <- rep(0,4)
class(a)
a <- matrix(rep(0,100000000),nrow=1000)
sapply(1:100000,a[IDsA[[x]],1]<-wgtsA[[x]])
sapply(1:100000,function(x){a[IDsA[[x]],1]<-wgtsA[[x]]})
head(a)
head(a)
1%in%c(1,2)
1234567812345678-1234567812345678.12345678
1-.95^6
14*13*12*11*10*9*8*7*6*5*4*3*2*1
C = matrix(1,2;5,3)
C = matrix(1,2,5,3)
c
C
C = matrix(c(1,2),c(5,3))
C
rm(C)
C = matrix(c(1,2,5,3),2,2)
C
C = matrix(c(1,2,5,3),2,2, byrow=TRUE)
C
C^2
A%*%A
C%*%C
rm(list=ls())
setwd('C:/Users/Wes/Desktop/230A Assignment 1')
load('family.rda')
regcoef<-function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
x <- df[,2]
y <- df[,1]
r <- sum((x-mean(x))/sd(x)*(y-mean(y))/sd(y))/length(x)
b <- r*sd(y)/sd(x)
a <- mean(y)-b*mean(x)
return(c(a,b))
}
regcoef<-function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
x <- df[,1]
y <- df[,2]
r <- sum((x-mean(x))/sd(x)*(y-mean(y))/sd(y))/length(x)
b <- r*sd(y)/sd(x)
a <- mean(y)-b*mean(x)
return(c(a,b))
}
hi <- regcoef()
hi
regcoef<-function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
x <- df[,1]
y <- df[,2]
r <- sum((x-mean(x))/sqrt( mean((x-mean(x))^2) )*(y-mean(y))/sqrt( mean((y-mean(y))^2) )/length(x)
b <- r*sd(y)/sqrt( mean((x-mean(x))^2) )
a <- mean(y)-b*mean(x)
return(c(a,b))
}
regcoef<-function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
x <- df[,1]
y <- df[,2]
r <- sum((x-mean(x))/sqrt(mean((x-mean(x))^2))*(y-mean(y))/sqrt(mean((y-mean(y))^2))/length(x))
b <- r*sd(y)/sqrt(mean((x-mean(x))^2))
a <- mean(y)-b*mean(x)
return(c(a,b))
}
regcoef()
lm(family[,5]~family[,4])
regcoef<-function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
x <- df[,1]
y <- df[,2]
r <- sum((x-mean(x))/sqrt(mean((x-mean(x))^2))*(y-mean(y))/sqrt(mean((y-mean(y))^2))/length(x))
b <- r*sqrt(mean((y-mean(y))^2))/sqrt(mean((x-mean(x))^2))
a <- mean(y)-b*mean(x)
return(c(a,b))
}
regcoef()
regcoef<-function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
x <- df[,1]
y <- df[,2]
r <- sum((x-mean(x))/sqrt(mean((x-mean(x))^2))*(y-mean(y))/sqrt(mean((y-mean(y))^2))/length(x))
b <- r*sqrt(mean((y-mean(y))^2))/sqrt(mean((x-mean(x))^2))
a <- mean(y)-b*mean(x)
return(c(a,b))
}
regline=function(df=family[4:5]){
# This function plots points and regression line, doesn't need to return
# anything.
coefs=regcoef(df)
plot(df[,1],df[,2],xlab=names(df[1]),ylab=names(df[2]))
abline(coefs)
title(paste('Regression of ',names(df[2]),' on ', names(df[1])))
}
regline()
