dev.off()
rm(list=ls())
makedata3=function(n,p=20,wh=15){
X=matrix(rnorm(n*5),n,5)
G <- matrix(rep(0,25),5,5)
G[lower.tri(G)]<-c(.7,.6,.5,.4,.5,.4,.3,.3,.2,.1)
G<-t(G)
G[lower.tri(G)]<-c(.7,.6,.5,.4,.5,.4,.3,.3,.2,.1)
diag(G)<-1
U <- chol(G)
X <- X%*%U
X2 <- X^2
X3 <- cbind(sapply(1:4,function(x){X[,x]*X[,x+1]}),sapply(1:3,function(x){X[,x]*X[,x+2]}),sapply(1:2,function(x){X[,x]*X[,x+3]}),X[,4]*X[,5])
X <- cbind(X,X2,X3)
X <- X[,sample(ncol(X))]
exps=seq(-1,-2.5,length=wh)
beta=rep(0,p)
beta[1:wh]=exp(exps)
Y=.5+X%*%beta+rnorm(n)
return(data.frame(Y,X))
}
standardizeData <- function(data){
data <- data.frame(apply(data,2,function(x){(x-mean(x))/sd(x)}))
}
PCRFUN <- function(data,ncomp){
PCRRMS <- numeric()
cv_folds <- sample(c(rep(1:10,10)))
for (fold in 1:10){
model <- pls::pcr(Y~.,data=data.frame(data[cv_folds!=fold,]),ncomp)
predictions <- predict(model,newdata=data.frame(data[cv_folds==fold,]))
PCRRSS[fold] <- sum((data[cv_folds==fold,1]-predictions)^2)
}
return(PCRRSS)
}
n <- 100
BSSRSS <- numeric()
RidgeRSS <- numeric()
LassoRSS <- numeric()
PCRRSS <- numeric()
TreeRSS <- numeric()
for (rep in 1:100){
data <- makedata3(n)
data <- standardizeData(data)
#Ridge CV
model <- ridge.cv(as.matrix(data[,2:21]),data[,1])
RidgeRSS[rep] <- mean(model$cv.error.matrix[,1])*10
#Lasso CV
lasso <- adalasso(as.matrix(data[,2:21]),data[,1],k=10,both=FALSE)
LassoRSS[rep] <- lasso$cv.lasso*n/10
#Best subset selection, redux
cv_folds <- sample(c(rep(1:10,10)))
BSSRSSs <- numeric()
for (fold in 1:10){
train <- data.frame(data[cv_folds!=fold,])
test <- data.frame(data[cv_folds==fold,])
model <- lm(Y~.,data=train)
AICmodel <- step(model,trace=0)
pred <- predict(AICmodel,newdata=test)
BSSRSSs[fold] <- sum((pred - test[,1])^2)
}
BSSRSS[rep] <- mean(BSSRSSs)
#Regression trees
model <- rpart(Y~.,data=data,method='anova')
TreeRSS[rep] <- min(model$cptable[,"xerror"])*10
#model$cptable[which.min(model$cptable[,"xerror"]),"CP"]*10
#PCR
PCRCV <- list()
for (ncomp in 1:20){
PCRCV[[ncomp]] <- PCRFUN(data,ncomp)
}
PCRRSSs <-sapply(PCRCV,mean)
PCRRSS[rep] <- min(PCRRSSs)
}
png('Figure3.png')
boxplot(LassoRSS,RidgeRSS,TreeRSS,PCRRSS,BSSRSS,ylab='CV RSS',names=c('Lasso','Ridge','Reg Tree','PCR','Best Subset'),main='Part 2')
dev.off()
n <- 100
model <- ridge.cv(as.matrix(data[,2:21]),data[,1])
RidgeRSS[rep] <- mean(model$cv.error.matrix[,1])*10
RidgeRSS
model$cv.error.matrix
model$cv.error
RidgeRSS
?ridge.cv
data[,1]
makedata=function(n,p=20,wh=15){
X=matrix(rnorm(n*p),n,p)
rhos <- seq(.1,.9,.2)
blocks <- lapply(rhos,function(x){matrix(rep(x,9),3,3)})
blocks[[6]] <- matrix(rep(0.0,25),5,5)
G <- as.matrix(bdiag(blocks))
diag(G) <- 1
U <- chol(G)
X <- X%*%U
X <- X[,sample(ncol(X))]
exps=seq(-1,-2.5,length=wh)
beta=rep(0,p)
beta[1:wh]=exp(exps)
Y=.5+X%*%beta+rnorm(n)
return(data.frame(Y,X))
}
standardizeData <- function(data){
data <- data.frame(apply(data,2,function(x){(x-mean(x))/sd(x)}))
}
data <- makedata(100)
data <- standardizedata(data)
data <- standardizeData(data)
data[,1]
folds <- sample(rep(1:10,10))
folds
sum((data[folds==1,1])^2)
model <- ridge.cv(as.matrix(data[,2:21]),data[,1])
RidgeRSS[rep] <- mean(model$cv.error.matrix[,1])*10
model$lambda.opt
lasso <- adalasso(as.matrix(data[,2:21]),data[,1],k=10,both=FALSE)
LassoRSS[rep] <- lasso$cv.lasso*n/10
lasso$lambda.lasso
n <- 100
p <- 20
wh <- 15
X=matrix(rnorm(n*5),n,5)
X2 = X^2
X3 = X^3
X4 = X*4+2
exps=seq(-1,-2.5,length=wh)
beta=rep(0,p)
beta[1:wh]=4
Y=.5+X%*%beta+rnorm(n)
X<-cbind(X,X2,X3,X4)
exps=seq(-1,-2.5,length=wh)
beta=rep(0,p)
beta[1:wh]=4
Y=.5+X%*%beta+rnorm(n)
beta
rm(list=ls())
makedata4=function(n,p=20,wh=15){
X=matrix(rnorm(n*5),n,5)
X2 = X^2
X3 = X^3
X4 = X*4+2
X<-cbind(X,X2,X3,X4)
exps=seq(-1,-2.5,length=wh)
beta=rep(0,p)
beta[1:wh]=4
Y=.5+X%*%beta+rnorm(n)
return(data.frame(Y,X))
}
standardizeData <- function(data){
data <- data.frame(apply(data,2,function(x){(x-mean(x))/sd(x)}))
}
PCRFUN <- function(data,ncomp){
PCRRMS <- numeric()
cv_folds <- sample(c(rep(1:10,10)))
for (fold in 1:10){
model <- pls::pcr(Y~.,data=data.frame(data[cv_folds!=fold,]),ncomp)
predictions <- predict(model,newdata=data.frame(data[cv_folds==fold,]))
PCRRSS[fold] <- sum((data[cv_folds==fold,1]-predictions)^2)
}
return(PCRRSS)
}
n <- 100
BSSRSS <- numeric()
RidgeRSS <- numeric()
LassoRSS <- numeric()
PCRRSS <- numeric()
TreeRSS <- numeric()
for (rep in 1:100){
data <- makedata4(n)
data <- standardizeData(data)
#Ridge CV
model <- ridge.cv(as.matrix(data[,2:21]),data[,1])
RidgeRSS[rep] <- mean(model$cv.error.matrix[,1])*10
#Lasso CV
lasso <- adalasso(as.matrix(data[,2:21]),data[,1],k=10,both=FALSE)
LassoRSS[rep] <- lasso$cv.lasso*n/10
#Best subset selection, redux
cv_folds <- sample(c(rep(1:10,10)))
BSSRSSs <- numeric()
for (fold in 1:10){
train <- data.frame(data[cv_folds!=fold,])
test <- data.frame(data[cv_folds==fold,])
model <- lm(Y~.,data=train)
AICmodel <- step(model,trace=0)
pred <- predict(AICmodel,newdata=test)
BSSRSSs[fold] <- sum((pred - test[,1])^2)
}
BSSRSS[rep] <- mean(BSSRSSs)
#Regression trees
model <- rpart(Y~.,data=data,method='anova')
TreeRSS[rep] <- min(model$cptable[,"xerror"])*10
#model$cptable[which.min(model$cptable[,"xerror"]),"CP"]*10
#PCR
PCRCV <- list()
for (ncomp in 1:20){
PCRCV[[ncomp]] <- PCRFUN(data,ncomp)
}
PCRRSSs <-sapply(PCRCV,mean)
PCRRSS[rep] <- min(PCRRSSs)
}
boxplot(LassoRSS,RidgeRSS,TreeRSS,PCRRSS,BSSRSS,ylab='CV RSS',names=c('Lasso','Ridge','Reg Tree','PCR','Best Subset'),main='Part 2')
rm(list=ls())
makedata=function(n,p=20,wh=15){
X=matrix(rnorm(n*p),n,p)
rhos <- seq(.1,.9,.2)
blocks <- lapply(rhos,function(x){matrix(rep(x,9),3,3)})
blocks[[6]] <- matrix(rep(0.0,25),5,5)
G <- as.matrix(bdiag(blocks))
diag(G) <- 1
U <- chol(G)
X <- X%*%U
#X <- X[,sample(ncol(X))]
exps=seq(-1,-2.5,length=wh)
beta=rep(0,p)
beta[1:wh]=exp(exps)
Y=.5+X%*%beta+rnorm(n)
return(data.frame(Y,X))
}
standardizeData <- function(data){
data <- data.frame(apply(data,2,function(x){(x-mean(x))/sd(x)}))
}
# PCR CV
PCRFUN <- function(data,ncomp){
PCRRMS <- numeric()
cv_folds <- sample(c(rep(1:10,10)))
for (fold in 1:10){
model <- pls::pcr(Y~.,data=data.frame(data[cv_folds!=fold,]),ncomp)
predictions <- predict(model,newdata=data.frame(data[cv_folds==fold,]))
PCRRSS[fold] <- sum((data[cv_folds==fold,1]-predictions)^2)
}
return(PCRRSS)
}
n <- 100
BSSRSS <- numeric()
RidgeRSS <- numeric()
LassoRSS <- numeric()
PCRRSS <- numeric()
TreeRSS <- numeric()
#Part 1
for (rep in 1:100){
data <- makedata(n)
data <- standardizeData(data)
#Ridge CV
model <- ridge.cv(as.matrix(data[,2:21]),data[,1])
RidgeRSS[rep] <- mean(model$cv.error.matrix[,1])*10
#Lasso CV
lasso <- adalasso(as.matrix(data[,2:21]),data[,1],k=10,both=FALSE)
LassoRSS[rep] <- lasso$cv.lasso*n/10
#Best subset selection, redux
cv_folds <- sample(c(rep(1:10,10)))
BSSRSSs <- numeric()
for (fold in 1:10){
train <- data.frame(data[cv_folds!=fold,])
test <- data.frame(data[cv_folds==fold,])
model <- lm(Y~.,data=train)
AICmodel <- step(model,trace=0)
pred <- predict(AICmodel,newdata=test)
BSSRSSs[fold] <- sum((pred - test[,1])^2)
}
BSSRSS[rep] <- mean(BSSRSSs)
#Regression trees
model <- rpart(Y~.,data=data,method='anova')
TreeRSS[rep] <- min(model$cptable[,"xerror"])*10
#model$cptable[which.min(model$cptable[,"xerror"]),"CP"]*10
#PCR
PCRCV <- list()
for (ncomp in 1:20){
PCRCV[[ncomp]] <- PCRFUN(data,ncomp)
}
PCRRSSs <-sapply(PCRCV,mean)
PCRRSS[rep] <- min(PCRRSSs)
}
boxplot(LassoRSS,RidgeRSS,TreeRSS,PCRRSS,BSSRSS,ylab='CV RSS',names=c('Lasso','Ridge','Reg Tree','PCR','Best Subset'),main='Part 1')
?pcr
(1:18^2)/19
(1:18)^2%%19
quadres <- factor((1:18)^2%%19)
levels(quadres)
rm(list=ls())
quadres <- factor((1:18)^2%%19)
quadres <- as.numeric(levels(quadres))
design = matrix(-99,nrow=block,ncol=length(quadres))
design = matrix(-99,nrow=19,ncol=length(quadres))
design
sapply(1:19,function(x){design[,x]<-(quadres+x)%%19})
a <- c(1,20,25)
a%%19
quadres
quadres+10
(quadres+10)%%19
length(design[,1])
quadres <- factor((1:18)^2%%19)
quadres <- as.numeric(levels(quadres))
#1,4,5,6,7,9,11,16,17
design = matrix(0,nrow=9,ncol=19)
sapply(1:19,function(x){design[,x]<-(quadres+x)%%19})
design = matrix(0,nrow=9,ncol=19)
sapply(1:19,function(x){design[,x]<-(quadres+x-1)%%19})
design
rm(design)
design <- sapply(1:19,function(x){(quadres+x-1)%%19})
design
quadres <- factor((1:18)^2%%19)
quadres <- as.numeric(levels(quadres))
#1,4,5,6,7,9,11,16,17
#design = matrix(0,nrow=9,ncol=19)
design <- sapply(1:19,function(x){(quadres+x-1)%%19})
design[design==0]<-19
design
block=GF ## b/c of the form 4*s+3=19 s=4
blockSize=2*4+1 ## from 2*s+1
design = matrix(-99,nrow=block,ncol=length(quadRes))
design[1,]=quadRes ## first block
OrthoArray=matrix(-1,nrow=GF,ncol=GF)
design = matrix(-99,nrow=block,ncol=length(quadRes))
design[1,]=quadRes ## first block
OrthoArray=matrix(-1,nrow=GF,ncol=GF)
for (b in 2:block){
take=(design[b-1,]+1)%%GF ## block=treatment
take[take==0]=19 ## keep 19 at 19 after mod
design[b,]=take
OrthoArray[b,design[b,]]=1
}
#design
OrthoArray[1,design[1,]]=1
OrthoArray=t(OrthoArray) ## want the block as the cols
OrthoArray=rbind(OrthoArray,rep(-1,GF))
GF=20-1 ## exist N-1 treatment BIBD
GFvec=0:GF
quadRes=sort(unique(GFvec^2 %%19)) ## quadratic residual
quadRes=quadRes[-1] ## take out 0 at the start
block=GF ## b/c of the form 4*s+3=19 s=4
blockSize=2*4+1 ## from 2*s+1
design = matrix(-99,nrow=block,ncol=length(quadRes))
design[1,]=quadRes ## first block
OrthoArray=matrix(-1,nrow=GF,ncol=GF)
design = matrix(-99,nrow=block,ncol=length(quadRes))
design[1,]=quadRes ## first block
OrthoArray=matrix(-1,nrow=GF,ncol=GF)
for (b in 2:block){
take=(design[b-1,]+1)%%GF ## block=treatment
take[take==0]=19 ## keep 19 at 19 after mod
design[b,]=take
OrthoArray[b,design[b,]]=1
}
#design
OrthoArray[1,design[1,]]=1
OrthoArray=t(OrthoArray) ## want the block as the cols
OrthoArray=rbind(OrthoArray,rep(-1,GF))
OrthoArray
design
quadres <- factor((1:18)^2%%19)
quadres <- as.numeric(levels(quadres))
#1,4,5,6,7,9,11,16,17
#design = matrix(0,nrow=9,ncol=19)
design2 <- sapply(1:19,function(x){(quadres+x-1)%%19})
design2[design==0]<-19
design2 <- t(design2)
design2==design
design2 <- sapply(1:19,function(x){(quadres+x-1)%%19})
design2[design=0]<-19
design2 <- t(design2)
design2 == design
rm(list=ls())
GF=20-1 ## exist N-1 treatment BIBD
GFvec=0:GF
quadRes=sort(unique(GFvec^2 %%19)) ## quadratic residual
quadRes=quadRes[-1] ## take out 0 at the start
quadRes
block=GF ## b/c of the form 4*s+3=19 s=4
blockSize=2*4+1 ## from 2*s+1
design = matrix(-99,nrow=block,ncol=length(quadRes))
design[1,]=quadRes ## first block
design
for (b in 2:block){
take=(design[b-1,]+1)%%GF ## block=treatment
take[take==0]=19 ## keep 19 at 19 after mod
design[b,]=take
OrthoArray[b,design[b,]]=1
}
OrthoArray=matrix(-1,nrow=GF,ncol=GF)
for (b in 2:block){
take=(design[b-1,]+1)%%GF ## block=treatment
take[take==0]=19 ## keep 19 at 19 after mod
design[b,]=take
OrthoArray[b,design[b,]]=1
}
design
quadres <- factor((1:18)^2%%19)
quadres <- as.numeric(levels(quadres))
#1,4,5,6,7,9,11,16,17
#design = matrix(0,nrow=9,ncol=19)
design2 <- sapply(1:19,function(x){(quadres+x-1)%%19})
design2[design=0]<-19
design2 <- t(design2)
design2
design2 <- sapply(1:19,function(x){(quadres+x-1)%%19})
design2[design2=0]<-19
design2 <- t(design2)
design2==desing
design2==design
design2
design2 <- sapply(1:19,function(x){(quadres+x-1)%%19})
design2[design2==0]<-19
design2 <- t(design2)
design2
design2==design
OrthoArray
quadres <- factor((1:18)^2%%19)
quadres <- as.numeric(levels(quadres))
#1,4,5,6,7,9,11,16,17
BIBD <- sapply(1:19,function(x){(quadres+x-1)%%19})
BIBD[BIBD==0]<-19
BIBD
OA <- matrix(-1,19,19)
OA <- sapply(1:19,function(x){OA[x,BIBD[,x]]<-1})
OA
OA <- matrix(-1,19,19)
OA[1,BIBD[,1]]<-1
OA
OA <- sapply(1:19,function(x){OA[BIBD[,x],x]<-1})
OA
OA[BIBD[,1],1]
OA <- matrix(-1,19,19)
OA[BIBD[,1],1]
OA <- matrix(-1,19,19)
for (i in 1:19){
OA[BIBD[,i],i]<-1
}
OA
OrthoArray
BIBD[,1]
quadRes
OrthoArray[1,design[1,]]=1
OrthoArray
OrthoArray=t(OrthoArray)
OrthoArray
OrthoArray == OA
#232 HW
quadres <- factor((1:18)^2%%19)
quadres <- as.numeric(levels(quadres))
#1,4,5,6,7,9,11,16,17
BIBD <- sapply(1:19,function(x){(quadres+x-1)%%19})
BIBD[BIBD==0]<-19
OA <- matrix(-1,20,19)
for (i in 1:19){
OA[BIBD[,i],i]<-1
}
## Dat code
GF=20-1 ## exist N-1 treatment BIBD
GFvec=0:GF
quadRes=sort(unique(GFvec^2 %%19)) ## quadratic residual
quadRes=quadRes[-1] ## take out 0 at the start
block=GF ## b/c of the form 4*s+3=19 s=4
blockSize=2*4+1 ## from 2*s+1
design = matrix(-99,nrow=block,ncol=length(quadRes))
design[1,]=quadRes ## first block
OrthoArray=matrix(-1,nrow=GF,ncol=GF)
for (b in 2:block){
take=(design[b-1,]+1)%%GF ## block=treatment
take[take==0]=19 ## keep 19 at 19 after mod
design[b,]=take
OrthoArray[b,design[b,]]=1
}
#design
OrthoArray[1,design[1,]]=1
OrthoArray=t(OrthoArray) ## want the block as the cols
OrthoArray=rbind(OrthoArray,rep(-1,GF))
OA == OrthoArray
H=matrix(c(1,1,1,-1),nrow=2,2)
H2=H
for(i in 1:3){
H=kronecker(H,H2)
}
H=H[2:16,2:16]
H
H=matrix(c(1,1,1,-1),nrow=2,2)
H2=H
for(i in 1:3){
H=kronecker(H,H2)
}
HadMat <- matrix(c(1,1,1,-1))
HadMat <- kronecker(HadMat,HadMat)
HadMat <- kronecker(HadMat,HadMat)
HadMat <- matrix(c(1,1,1,-1),2,2)
HadMat <- kronecker(HadMat,HadMat)
HadMat <- kronecker(HadMat,HadMat)
HadMat==H
BIBD <- HadMat[-1,-1]
H <- H[2:16,2:16]
BIBD == H
x1 <- rep(0:4,5)
x2 <- order(x1)
x2
x1 <- rep(0:4,5)
x2 <- x1[order(x1)]
x2
x1
x1 <- rep(0:4,5)
x2 <- x1[order(x1)]
x3 <- (x1+x2)%%5
x4 <- (x1+2*x2)%%5
x5 <- (2*x1+x2)%%5
x6 <- (2*x1+2*x2)%%5
allX <- cbind(x1,x2,x3,x4,x5,x6)
allX
x1 <- rep(0:4,5)
x2 <- x1[order(x1)]
x3 <- (x1+x2)%%5
x4 <- (2*x1+x2)%%5
x5 <- (x1+2*x2)%%5
x6 <- (2*x1+2*x2)%%5
allX <- cbind(x1,x2,x3,x4,x5,x6)
